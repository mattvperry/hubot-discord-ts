{"version":3,"file":"index.js","sources":["../src/DiscordAdapter.ts","../index.ts"],"sourcesContent":["import * as Discord from 'discord.js';\r\nimport { Adapter, Envelope, Robot, TextMessage } from 'hubot';\r\n\r\nconst zSWC = '\\u200B';\r\n\r\nexport default class DiscordAdapter extends Adapter {\r\n    public client!: Discord.Client;\r\n\r\n    public constructor(robot: Robot, private token: string) {\r\n        super(robot);\r\n    }\r\n\r\n    public run = async () => {\r\n        this.client = new Discord.Client({\r\n            fetchAllMembers: true,\r\n            presence: {\r\n                status: 'online',\r\n            },\r\n            ws: {\r\n                compress: true,\r\n            },\r\n        });\r\n\r\n        this.client.on('ready', this.ready);\r\n        this.client.on('message', this.message);\r\n        this.client.on('error', this.error);\r\n        this.client.on('debug', this.robot.logger.debug.bind(this.robot.logger));\r\n\r\n        await this.client.login(this.token);\r\n    };\r\n\r\n    public close = () => this.client.destroy();\r\n\r\n    public send = async (envelope: Envelope, ...messages: string[]) => {\r\n        if (!envelope.room) {\r\n            return;\r\n        }\r\n\r\n        const channel = await this.client.channels.fetch(envelope.room);\r\n        if (!(channel instanceof Discord.TextChannel) || !this.hasPermission(channel, envelope.user.id)) {\r\n            this.robot.logger.error(`ERROR! Message not sent. Invalid channel.`);\r\n            return;\r\n        }\r\n\r\n        for (const msg of messages) {\r\n            // eslint-disable-next-line no-await-in-loop\r\n            await this.sendMessage(channel, msg);\r\n        }\r\n    };\r\n\r\n    public reply = (envelope: Envelope, ...messages: string[]) => {\r\n        const [first, ...rest] = messages;\r\n        return this.send(envelope, `<@${envelope.user.id}> ${first}`, ...rest);\r\n    };\r\n\r\n    private ready = () => {\r\n        if (this.client.user === null) {\r\n            throw new Error('Discord user is null after logging in');\r\n        }\r\n\r\n        this.robot.logger.info(`Logged in: ${this.client.user.username}#${this.client.user.discriminator}`);\r\n        this.robot.name = this.client.user.username;\r\n        this.robot.logger.info(`Robot Name: ${this.robot.name}`);\r\n        this.emit('connected');\r\n    };\r\n\r\n    private sendMessage = async (channel: Discord.TextChannel, msg: string) => {\r\n        try {\r\n            await channel.send(zSWC + msg, { split: true });\r\n            this.robot.logger.debug(`SUCCESS! Message sent to: ${channel.id}`);\r\n        } catch (e) {\r\n            this.robot.logger.error(`ERROR! Message not sent: ${msg}\\r\\n${e}`);\r\n        }\r\n    };\r\n\r\n    private message = (msg: Discord.Message) => {\r\n        // Ignore self messages\r\n        if (msg.author.id === this.client.user?.id) {\r\n            return;\r\n        }\r\n\r\n        const user = this.mapUser(msg.author, msg.channel.id);\r\n        const text = this.formatIncomingMsg(msg);\r\n\r\n        this.robot.logger.debug(text);\r\n        this.robot.receive(new TextMessage(user, text, msg.id));\r\n    };\r\n\r\n    private error = async (error: Error) => {\r\n        this.robot.logger.error(`Discord client encounted an error:\\r\\n${error}`);\r\n        this.client.destroy();\r\n        await this.client.login(this.token);\r\n    };\r\n\r\n    private hasPermission = (channel: Discord.TextChannel, user: Discord.GuildMemberResolvable) => {\r\n        return channel.permissionsFor(user)?.has('SEND_MESSAGES');\r\n    };\r\n\r\n    private mapUser = (author: Discord.User, id: string) => {\r\n        const user = this.robot.brain.userForId(author.id);\r\n        user.room = id;\r\n        user.name = author.username;\r\n        user.id = author.id;\r\n        user.discriminator = author.discriminator;\r\n\r\n        return user;\r\n    };\r\n\r\n    private formatIncomingMsg = (msg: Discord.Message) => {\r\n        let text = msg.cleanContent;\r\n        if (msg.channel.type === 'dm' && !text.startsWith(this.robot.name)) {\r\n            text = `${this.robot.name} ${text}`;\r\n        }\r\n\r\n        return text;\r\n    };\r\n}\r\n","import { Robot } from 'hubot';\r\n\r\nimport DiscordAdapter from './src/DiscordAdapter';\r\n\r\nexport { DiscordAdapter };\r\n\r\nconst adapterName = 'discord-ts';\r\nexport function hasDiscordAdapter(robot: Robot): robot is Robot<DiscordAdapter> {\r\n    return robot.adapterName === adapterName;\r\n}\r\n\r\nexport function use(robot: Robot) {\r\n    if (!process.env.HUBOT_DISCORD_TOKEN) {\r\n        throw new Error('Environment variable named `HUBOT_DISCORD_TOKEN` required.');\r\n    }\r\n\r\n    return new DiscordAdapter(robot, process.env.HUBOT_DISCORD_TOKEN);\r\n}\r\n"],"names":["DiscordAdapter","Adapter","[object Object]","robot","token","super","this","async","client","Discord.Client","fetchAllMembers","presence","status","ws","compress","on","ready","message","error","logger","debug","bind","login","destroy","envelope","messages","room","channel","channels","fetch","Discord.TextChannel","hasPermission","user","id","msg","sendMessage","first","rest","send","Error","info","username","discriminator","name","emit","split","e","author","mapUser","text","formatIncomingMsg","receive","TextMessage","permissionsFor","has","brain","userForId","cleanContent","type","startsWith","adapterName","process","env","HUBOT_DISCORD_TOKEN"],"mappings":"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"}